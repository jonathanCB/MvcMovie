<!--
    Quando o controlador de filmes foi criado, o scaffolding incluiu a seguinte
    instrução (arroba)model na parte superior do arquivo Index.cshtml:

    (arroba)model MvcMovie.Models.Movie especifica que a exibição espera que o modelo
    de exibição seja do tipo Movie.
-->
@model MvcMovie.Models.MovieGenreViewModel 
<!--OLD: IEnumerable<MvcMovie.Models.Movie>--> 

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>

<!--
    A marcação <form> HTML usa o Auxiliar de Marcação de Formulário. Portanto, quando
    você enviar o formulário, a cadeia de caracteres de filtro será enviada para a ação
    Index do MovieController.
-->
<!--
    Não há nenhuma sobrecarga [HttpPost] do método Index no MovieController que poderia
    ser esperada. Isso não é necessário, porque o método não está alterando o estado do
    aplicativo, apenas filtrando os dados.
-->
<form asp-controller="Movies" asp-action="Index" method="get">
    <p>
        <select asp-for="MovieGenre" asp-items="Model.Genres">
            <option value="">All</option>
        </select>

        Title: <input type="text" asp-for="SearchString" />
        <input type="submit" value="Filter" />
        <!-- OLD
        Title: <input type="text" name="SearchString" />
        <input type="submit" value="Filter" />
    -->
    </p>
</form>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Movies[0].Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Movies[0].ReleaseDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Movies[0].Genre)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Movies[0].Rating)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Movies[0].Price)
            </th>
            <!--
        <th>
            (arroba)Html.DisplayNameFor(model => model.Title)
        </th>
        <th>
            (arroba)Html.DisplayNameFor(model => model.ReleaseDate)
        </th>
        <th>
            (arroba)Html.DisplayNameFor(model => model.Genre)
        </th>
        <th>
            (arroba)Html.DisplayNameFor(model => model.Price)
        </th>
        <th></th>
    -->
        </tr>
    </thead>
    <tbody>
        <!--
        A diretiva (arroba)model permite acessar a lista de filmes que o Controller
        passou para a View usando um objeto Model fortemente tipado. Por exemplo,
        na exibição Index.cshtml, o código executa um loop pelos filmes com uma instrução
        foreach no objeto Model fortemente tipado:
    -->

        <!--(arroba)foreach (var item in Model)-->
            @foreach (var item in Model.Movies)
            {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReleaseDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Genre)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Rating)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
            }
    </tbody>
</table>
